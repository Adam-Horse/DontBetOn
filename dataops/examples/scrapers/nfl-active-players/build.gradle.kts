import com.github.gradle.node.npm.proxy.ProxySettings
import com.github.gradle.node.npm.task.NpmTask
import com.github.gradle.node.npm.task.NpxTask
import com.github.gradle.node.task.NodeTask
import com.github.gradle.node.yarn.task.YarnTask

plugins {
  base
  id("com.github.node-gradle.node") version "7.1.0"
}

val avroSchemaDir = file("${buildDir}/src/schemas")
val avroInterfaceDir = file("${projectDir}/src/schemas")

    // Get the avro build directory from the `:avro` subproject
val avroProject = project(":avro-schemas")
val avscDir = file("${avroProject.buildDir}/avsc")


node {
    // Download nodejs 22.9.0 
    download.set(true)
    version.set("22.9.0")
    // Download latest version of npm and yarn
    npmVersion.set("")
    yarnVersion.set("")
    npmInstallCommand.set("install")
    distBaseUrl.set("https://nodejs.org/dist")
    workDir.set(file("${project.projectDir}/.cache/nodejs"))
    npmWorkDir.set(file("${project.projectDir}/.cache/npm"))
    yarnWorkDir.set(file("${project.projectDir}/.cache/yarn"))
    nodeProjectDir.set(file("${project.projectDir}"))
}

tasks.npmInstall {
    nodeModulesOutputFilter {
        exclude("notExistingFile")
    }
}

tasks.register<NpmTask>("installAvroTsCli") {
        description = "Installs @ovotech/avro-ts-cli as a dev dependency."

        // Run `npm install --save-dev @ovotech/avro-ts-cli`
        args.set(listOf("install", "@ovotech/avro-ts-cli", "--save-dev"))

        dependsOn("npmSetup")
    }



tasks.register<Exec>("genAvroInterfaces") {
        description = "Runs the avro-ts command from the avro-ts-cli."
        
        // Ensure that the Node.js setup and npm installation are done before running this
        dependsOn("npmSetup", "installAvroTsCli")
        dependsOn("getCurrentAvscFiles")


        // Ensure the output directory exists
        doFirst {
            avroInterfaceDir.mkdirs()
        }

        // Command to run avro-ts, installed in node_modules/.bin
        val inputfile = "${avroSchemaDir.absolutePath}/crawl/crawlResponse.avsc"
        commandLine("npx", "avro-ts", inputfile)

    }

tasks.register<Copy>("createAvroInterfaces") {
    dependsOn("genAvroInterfaces")

    val inputDir = "${avroSchemaDir}/crawl"
    from(inputDir) {
          include("crawlResponse.avsc.ts")
    }

        rename("crawlResponse.avsc.ts", "avro.interfaces.ts") // Replace with actual names

    into(avroInterfaceDir)
}

tasks.register<Copy>("getCurrentAvscFiles") {
      // This task depends on the `:avro:build` task
    dependsOn(":avro-schemas:build")



  // Define the source files from the avscDir generated by the :avro:build task
    from(avscDir) {
        include("crawl/crawlResponse.avsc")    
    }

  into(avroSchemaDir)

  // Ensure destination directory exists before copying files
    doFirst {
            avroSchemaDir.mkdirs()
    }

}
/**
 * Main build task.
 */
tasks.named("build") {
  dependsOn("createAvroInterfaces")
}
